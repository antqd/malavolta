// ----- generator & datasource -----
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")         // Accelerate
  directUrl = env("DIRECT_DATABASE_URL")  // Supabase direct
}

// ----- ENUM -----
enum Role { USER ADMIN }
enum PublishStatus { DRAFT PUBLISHED ARCHIVED }

// ----- MODELS -----
model Media {
  id            String         @id @default(cuid())
  url           String
  width         Int?
  height        Int?
  alt_it        String?
  alt_en        String?
  createdAt     DateTime       @default(now())
  productImages ProductImage[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  logoId   String?
  logo     Media?    @relation(fields: [logoId], references: [id])
  products Product[]
}

model Category {
  id       String    @id @default(cuid())
  name_it  String
  name_en  String?
  slug     String    @unique
  products Product[]
}

model Product {
  id             String         @id @default(cuid())
  title_it       String
  title_en       String?
  slug           String         @unique
  description_it String?
  description_en String?
  brandId        String?
  brand          Brand?         @relation(fields: [brandId], references: [id])
  categoryId     String?
  category       Category?      @relation(fields: [categoryId], references: [id])
  year           Int?
  powerCV        Int?
  priceCents     Int?
  used           Boolean        @default(false)
  features       Json?
  status         PublishStatus  @default(DRAFT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  images         ProductImage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  mediaId   String
  media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  order     Int     @default(0)
}

model Service {
  id         String         @id @default(cuid())
  title_it   String
  title_en   String?
  slug       String         @unique
  content_it String?
  content_en String?
  coverId    String?
  cover      Media?         @relation(fields: [coverId], references: [id])
  status     PublishStatus  @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model BlogPost {
  id          String         @id @default(cuid())
  title_it    String
  title_en    String?
  slug        String         @unique
  excerpt_it  String?
  excerpt_en  String?
  content_it  String?
  content_en  String?
  coverId     String?
  cover       Media?         @relation(fields: [coverId], references: [id])
  status      PublishStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
